{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Monitoring API"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    { "name": "auth", "description": "Auth routes" },
    {
      "name": "checks",
      "description": "Routes for creating, updating and deleting checks"
    }
  ],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Create user and send verification link",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify": {
      "get": {
        "tags": ["auth"],
        "summary": "Verify user account",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "description": "Verification token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User account verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Authenticate user and return access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/checks": {
      "get": {
        "summary": "Get all checks",
        "tags": ["checks"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "A list of check objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UrlCheck"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new check",
        "tags": ["checks"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description": "The check object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCheckDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created check object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlCheck"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/checks/{id}": {
      "get": {
        "summary": "Get a specific check by ID",
        "tags": ["checks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the check to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The check object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlCheck"
                }
              }
            }
          },
          "404": {
            "description": "The check with the specified ID was not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "summary": "Update a specific check by ID",
        "tags": ["checks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the check to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated check object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCheckDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated check object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlCheck"
                }
              }
            }
          },
          "404": {
            "description": "The check with the specified ID was not found"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific check by ID",
        "tags": ["checks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the check to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The check object was successfully deleted"
          },
          "404": {
            "description": "The check with the specified ID was not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/checks/tags": {
      "get": {
        "summary": "Get all checks grouped by tag(s)",
        "tags": ["checks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "description": "Tag(s) to group by (case-insensitive). Can be an array or a single string.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of check objects grouped by tag(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tagName": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/UrlCheck"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/checks/reports": {
      "get": {
        "summary": "Get a report of checks",
        "tags": ["checks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "description": "Tag(s) to filter by (case-insensitive). Can be an array or a single string.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A report of checks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckWithLog"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 6
          }
        },
        "required": ["email", "password"]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 6
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": ["email", "password", "firstName", "lastName"]
      },

      "CreateCheckDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "protocol": {
            "type": "string",
            "enum": ["http", "https", "tcp"]
          },
          "path": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          },
          "webhook": {
            "type": "string",
            "format": "uri"
          },
          "timeoutInSeconds": {
            "type": "integer",
            "minimum": 5,
            "maximum": 60
          },
          "intervalInSeconds": {
            "type": "integer",
            "minimum": 1,
            "maximum": 600
          },
          "threshold": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10
          },
          "authentication": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "minLength": 1
              },
              "password": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          "httpHeaders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "minLength": 1
                },
                "value": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          },
          "assert": {
            "type": "object",
            "properties": {
              "statusCode": {
                "type": "integer",
                "minimum": 100,
                "maximum": 599
              }
            }
          },
          "ignoreSSL": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["name", "url", "protocol"]
      },
      "UpdateCheckDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "protocol": {
            "type": "string",
            "enum": ["http", "https", "tcp"]
          },
          "path": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          },
          "webhook": {
            "type": "string",
            "format": "uri"
          },
          "timeoutInSeconds": {
            "type": "integer",
            "minimum": 5,
            "maximum": 60
          },
          "intervalInSeconds": {
            "type": "integer",
            "minimum": 1,
            "maximum": 600
          },
          "threshold": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10
          },
          "authentication": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "minLength": 1
              },
              "password": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          "httpHeaders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "minLength": 1
                },
                "value": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          },
          "assert": {
            "type": "object",
            "properties": {
              "statusCode": {
                "type": "integer",
                "minimum": 100,
                "maximum": 599
              }
            }
          },
          "ignoreSSL": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["name", "url", "protocol"]
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user"
          },
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "password": {
            "type": "string",
            "description": "The user's password"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the user's email has been verified or not"
          }
        },
        "required": ["email", "name", "password"]
      },
      "UrlCheck": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "required": true
          },
          "url": {
            "type": "string",
            "required": true
          },
          "protocol": {
            "type": "string",
            "enum": ["http", "https"],
            "required": true
          },
          "path": {
            "type": "string"
          },
          "port": {
            "type": "number"
          },
          "name": {
            "type": "string",
            "required": true
          },
          "webhook": {
            "type": "string"
          },
          "timeoutInSeconds": {
            "type": "number",
            "default": 5
          },
          "intervalInSeconds": {
            "type": "number",
            "default": 600
          },
          "threshold": {
            "type": "number",
            "default": 1
          },
          "authentication": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "httpHeaders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "required": true
                },
                "value": {
                  "type": "string",
                  "required": true
                }
              }
            }
          },
          "assert": {
            "type": "object",
            "properties": {
              "statusCode": {
                "type": "number"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ignoreSSL": {
            "type": "boolean"
          },
          "userId": {
            "type": "string",
            "required": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "__v": {
            "type": "number"
          }
        }
      },

      "Log": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "required": true
          },
          "checkId": {
            "type": "string",
            "description": "The ID of the check that this log belongs to.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "enum": ["UP", "DOWN"],
            "description": "The status of the check at the time this log was created."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the endpoint that was checked."
          },
          "responseTime": {
            "type": "number",
            "minimum": 0,
            "description": "The response time of the request, in milliseconds."
          },
          "intervalInSeconds": {
            "type": "integer",
            "minimum": 1,
            "description": "The interval between checks, in seconds."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when this log was created.",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when this log was last updated.",
            "readOnly": true
          }
        },
        "required": ["checkId", "status", "responseTime", "intervalInSeconds"]
      },

      "CheckWithLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UrlCheck"
          },
          {
            "type": "object",
            "properties": {
              "logs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          }
        ]
      }
    }
  }
}
